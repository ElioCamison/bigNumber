package com.elioCamison.bigNumber;

public class BigNumber {

    public String digit;

    /**
     * --o Constructor 1
     *
     * @param numero
     */
    public BigNumber(String numero) {
        //-- ----------------------------------------------------------------
        int cont = 0;
        //-- ----------------------------------------------------------------
        for (int i = 0; i < numero.length(); i++) {
            //-- ----------------------------------------------------------------
            char vlr = numero.charAt(i);
            //-- ----------------------------------------------------------------
            if (vlr == '0') {
                cont++;
            } else break;
        }
        //-- ----------------------------------------------------------------
        this.digit = numero.substring(cont);
        //-- ----------------------------------------------------------------
    }

    //-- ----------------------------------------------------------------
    //-- ----------------------------------------------------------------

    /**
     * --o Constructor 2
     *
     * @param b
     */
    public BigNumber(BigNumber b) {
        //-- ----------------------------------------------------------------
        this.digit = b.getNumero();
        //-- ----------------------------------------------------------------
    }

    //-- ----------------------------------------------------------------
    //-- ----------------------------------------------------------------

    /**
     * --o Suma
     *
     * @param other
     * @return
     */
    public BigNumber add(BigNumber other) {
        //-- ----------------------------------------------------------------
        StringBuilder vlr1 = new StringBuilder();
        StringBuilder vlr2 = new StringBuilder();
        //-- ----------------------------------------------------------------
        StringBuilder s1 = new StringBuilder();
        StringBuilder s2 = new StringBuilder();
        //-- ----------------------------------------------------------------
        //String valor = other.getNumero();
        vlr1.append(this.getNumero());
        vlr2.append(other.getNumero());
        //-- ----------------------------------------------------------------
        int cont = 0;
        if (vlr1.length() > vlr2.length() || vlr1.length() == vlr2.length()) {
            //-- ----------------------------------------------------------------
            s1 = vlr1;
            s2 = vlr2;
            //-- ----------------------------------------------------------------
            cont = vlr1.length() - vlr2.length();
            //-- ----------------------------------------------------------------
            s1.reverse();
            s2.reverse();
            //-- ----------------------------------------------------------------
            for (int i = 0; i < cont; i++) {
                s2.append(0);
            }
            //-- ----------------------------------------------------------------
        } else if (vlr1.length() < vlr2.length()) {
            //-- ----------------------------------------------------------------
            s1 = vlr2;
            s2 = vlr1;
            //-- ----------------------------------------------------------------
            cont = vlr2.length() - vlr1.length();
            //-- ----------------------------------------------------------------
            s1.reverse();
            s2.reverse();
            //-- ----------------------------------------------------------------
            for (int i = 0; i < cont; i++) {
                s2.append(0);
            }
            //-- ----------------------------------------------------------------
        }
        //-- ----------------------------------------------------------------
        StringBuilder aux = new StringBuilder();
        //-- ----------------------------------------------------------------
        int meLlevo = 0;
        //-- ----------------------------------------------------------------
        for (int i = 0; i < s1.length(); i++) {
            char c1 = s1.charAt(i);
            char c2 = s2.charAt(i);
            //-- ----------------------------------------------------------------
            String c11 = String.valueOf(c1);
            String c22 = String.valueOf(c2);
            //-- ----------------------------------------------------------------
            int c222 = Integer.parseInt(c11);
            int c111 = Integer.parseInt(c22);
            //-- ----------------------------------------------------------------
            c111 += meLlevo;
            //-- ----------------------------------------------------------------
            meLlevo = 0;
            //-- ----------------------------------------------------------------
            int res = c222 + c111;
            //-- ----------------------------------------------------------------
            if ( i == s1.length() - 1 && res > 9) {
                StringBuilder auxResta = new StringBuilder();
                String aux2 = String.valueOf(res);
                auxResta.append(aux2);
                auxResta.reverse();
                res = Integer.parseInt(auxResta.toString());
            }
            if (i != s1.length() - 1) {
                if (res > 9) {
                    res %= 10;
                    meLlevo++;
                }
            }
            //-- ----------------------------------------------------------------
            String result = Integer.toString(res);
            //-- ----------------------------------------------------------------
            aux.lastIndexOf(aux.append(result).toString());
        }
        //-- ----------------------------------------------------------------
        if (vlr1.length() > 1){
            aux.reverse();
        }
        //-- ----------------------------------------------------------------
        BigNumber nb = new BigNumber(aux.toString());

        //-- ----------------------------------------------------------------
        return nb;
    }

    //-- ----------------------------------------------------------------
    //-- ----------------------------------------------------------------

    /**
     * --o Resta
     *
     * @param other
     * @return
     */
    public BigNumber sub(BigNumber other) {
        //-- ----------------------------------------------------------------
        StringBuilder vlr1 = new StringBuilder();
        StringBuilder vlr2 = new StringBuilder();
        //-- ----------------------------------------------------------------
        int cont = 0;
        //-- ----------------------------------------------------------------
        if (this.getNumero().length() > other.getNumero().length() || this.getNumero().length() == other.getNumero().length()) {
            //-- ----------------------------------------------------------------
            vlr1.append(this.getNumero());
            vlr2.append(other.getNumero());
            //-- ----------------------------------------------------------------
            cont = vlr1.length() - vlr2.length();
            //-- ----------------------------------------------------------------
            vlr1.reverse();
            vlr2.reverse();
            //-- ----------------------------------------------------------------
            for (int i = 0; i < cont; i++) {
                vlr2.append(0);
            }
        } else if (vlr1.length() < vlr2.length()){
            //-- ----------------------------------------------------------------
            vlr1.append(this.getNumero());
            vlr2.append(other.getNumero());
            //-- ----------------------------------------------------------------
            cont = vlr2.length() - vlr1.length();
            //-- ----------------------------------------------------------------
            vlr1.reverse();
            vlr2.reverse();
            //-- ----------------------------------------------------------------
            for (int i = 0; i < cont; i++) {
                vlr2.append(0);
            }
        }
        //-- ----------------------------------------------------------------
        StringBuilder aux = new StringBuilder();
        //-- ----------------------------------------------------------------
        int meLlevo = 0;
        //-- ----------------------------------------------------------------
        for (int i = 0; i < vlr1.length(); i++) {
            //-- ----------------------------------------------------------------
            char caracterVlr1 = vlr1.charAt(i);
            char caracterVlr2 = vlr2.charAt(i);
            //-- ----------------------------------------------------------------
            String caracterVlr_1 = String.valueOf(caracterVlr1);
            String caracterVlr_2 = String.valueOf(caracterVlr2);
            //-- ----------------------------------------------------------------
            int valorResta1 = Integer.parseInt(caracterVlr_1);
            int valorResta2 = Integer.parseInt(caracterVlr_2);
            //-- ----------------------------------------------------------------
            valorResta2 += meLlevo;
            //-- ----------------------------------------------------------------
            meLlevo = 0;
            //-- ----------------------------------------------------------------
            int resultado = 0;
            //-- ----------------------------------------------------------------
            if ( valorResta1 < valorResta2 ) {
                valorResta1 += 10;
                meLlevo ++;
            }
            //-- ----------------------------------------------------------------
            resultado = valorResta1 - valorResta2;
            //-- ----------------------------------------------------------------
            int res = Math.abs(resultado);
            //-- ----------------------------------------------------------------
            String result = Integer.toString(res);
            //-- ----------------------------------------------------------------
            aux.lastIndexOf(aux.append(result).toString());
        }
        //-- ----------------------------------------------------------------
        aux.reverse();
        //-- ----------------------------------------------------------------
        BigNumber resta = new BigNumber(aux.toString());
        //-- ----------------------------------------------------------------
        return resta;
    }


    //-- ----------------------------------------------------------------
    //-- ----------------------------------------------------------------

    /**
     * --o Multiplica
     *
     * @param other
     * @return
     */
    public BigNumber mult(BigNumber other) {
        //-- ----------------------------------------------------------------
        StringBuilder vlr2 = new StringBuilder(other.getNumero());
        //-- ----------------------------------------------------------------
        int valor2 = Integer.parseInt(vlr2.toString());
        //-- ----------------------------------------------------------------
        BigNumber multi = new BigNumber("0");

        for (int i = 0; i < valor2 ; i++){

        multi = multi.add(this);
        }

        return multi;
    }

    //-- ----------------------------------------------------------------
    //-- ----------------------------------------------------------------

    /**
     * --o Divideix
     *
     * @param other
     * @return
     */
    BigNumber div(BigNumber other) {
        return other;
    }

    //-- ----------------------------------------------------------------
    //-- ----------------------------------------------------------------

    /**
     * --o  Compara dos BigNumber. Torna 0 si són iguals, -1 si el primer és menor
     * --o i torna 1 si el segon és menor
     *
     * @param other
     * @return oth
     */
    public int compareTo(BigNumber other) {
        //-- ----------------------------------------------------------------
        BigNumber oth = (BigNumber) other;
        //-- ----------------------------------------------------------------
        int n = this.digit.compareTo(oth.digit);
        int n2 = oth.digit.compareTo(this.digit);
        //-- ----------------------------------------------------------------
        if (n < n2) {
            return -1;
        } else if (n > n2) {
            return 1;
        } else {
            return 0;
        }
        //-- ----------------------------------------------------------------
    }

    //-- ----------------------------------------------------------------
    //-- ----------------------------------------------------------------

    /**
     * --o Mira si dos objectes BigNumber són iguals
     *
     * @param other
     * @return
     */
    public boolean equals(Object other) {
        //-- ----------------------------------------------------------------
        BigNumber oth = (BigNumber) other;
        //-- ----------------------------------------------------------------
        return this.digit.equals(oth.digit);
        //-- ----------------------------------------------------------------
    }

    //-- ----------------------------------------------------------------
    //-- ----------------------------------------------------------------

    /**
     * --o Retorna el valor de Numero
     *
     * @return
     */
    public String getNumero() {
        return digit;
    }

    //-- ----------------------------------------------------------------
    //-- ----------------------------------------------------------------

    /**
     * --o Canvia el valor de  numero
     *
     * @param numero
     */
    public void setNumero(String numero) {
        this.digit = numero;
    }

    //-- ----------------------------------------------------------------
    //-- ----------------------------------------------------------------

    @Override
    public String toString() {
        return "BigNumber{" +
                "numero='" + digit + '\'' +
                '}';
    }

}
